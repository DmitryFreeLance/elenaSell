package com.metamorphia;

import org.telegram.telegrambots.meta.TelegramBotsApi;
import org.telegram.telegrambots.updatesreceivers.DefaultBotSession;
import org.telegram.telegrambots.bots.TelegramLongPollingBot;

import org.telegram.telegrambots.meta.api.objects.Update;
import org.telegram.telegrambots.meta.api.objects.ChatJoinRequest;

import org.telegram.telegrambots.meta.api.methods.send.SendMessage;
import org.telegram.telegrambots.meta.api.methods.groupadministration.*;
import org.telegram.telegrambots.meta.api.objects.replykeyboard.*;
import org.telegram.telegrambots.meta.api.objects.replykeyboard.buttons.InlineKeyboardButton;

// –î–û–ë–ê–í–¨/–ò–°–ü–†–ê–í–¨:
import org.telegram.telegrambots.meta.api.methods.invoices.SendInvoice;
import org.telegram.telegrambots.meta.api.methods.AnswerPreCheckoutQuery;

import org.telegram.telegrambots.meta.api.objects.payments.LabeledPrice;

import java.time.Instant;
import java.time.ZoneId;
import java.time.format.DateTimeFormatter;
import java.util.*;

public class Bot extends TelegramLongPollingBot {
    private static final String TOKEN      = System.getenv("BOT_TOKEN");
    private static final String USERNAME   = System.getenv("BOT_USERNAME");
    private static final String PROVIDER   = System.getenv("TG_PROVIDER_TOKEN"); // —Ç–æ–∫–µ–Ω –ÆKassa –∏–∑ BotFather

    public static void start() throws Exception {
        TelegramBotsApi api = new TelegramBotsApi(DefaultBotSession.class);
        Bot bot = new Bot();
        api.registerBot(bot);
        BotSender.set(bot); // –≤–∞–∂–Ω–æ, —á—Ç–æ–±—ã –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å –∏–∑ –ª—é–±—ã—Ö –º–µ—Å—Ç
    }

    @Override public String getBotToken() { return TOKEN; }
    @Override public String getBotUsername() { return USERNAME; }

    @Override
    public void onUpdateReceived(Update update) {
        try {
            // 1) PreCheckoutQuery –û–ë–Ø–ó–ê–¢–ï–õ–ï–ù
            if (update.hasPreCheckoutQuery()) {
                var pq = update.getPreCheckoutQuery();
                execute(AnswerPreCheckoutQuery.builder()
                        .preCheckoutQueryId(pq.getId())
                        .ok(true) // –º–æ–∂–Ω–æ ok=false –∏ errorMessage, –µ—Å–ª–∏ –Ω—É–∂–Ω–æ –æ—Ç–∫–ª–æ–Ω–∏—Ç—å
                        .build());
                return;
            }

            // 2) –£—Å–ø–µ—à–Ω–∞—è –æ–ø–ª–∞—Ç–∞: –∞–∫—Ç–∏–≤–∏—Ä—É–µ–º –ø–æ–¥–ø–∏—Å–∫—É –∏ –≤—ã–¥–∞—ë–º —Å—Å—ã–ª–∫—É
            if (update.hasMessage() && update.getMessage().hasSuccessfulPayment()) {
                var msg = update.getMessage();
                var user = msg.getFrom();
                long userId = user.getId();
                var sp = msg.getSuccessfulPayment();
                String paymentId = sp.getTelegramPaymentChargeId(); // –º–æ–∂–Ω–æ —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å

                // –≥–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ–º –Ω–∞–ª–∏—á–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (FK)
                DB.upsertUser(userId, user.getUserName(), user.getFirstName(), user.getLastName());

                // –∞–∫—Ç–∏–≤–∏—Ä—É–µ–º –ø–æ–¥–ø–∏—Å–∫—É –Ω–∞ 30 –¥–Ω–µ–π
                SubscriptionService.activate(userId, paymentId);

                // –≤—ã–¥–∞—ë–º —Å—Å—ã–ª–∫—É: –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é ‚Äî –∑–∞—è–≤–∫–∞ (request_link), –ª–∏–±–æ —Ä–∞—Å–∫–æ–º–º–µ–Ω—Ç–∏—Ä—É–π "–æ–¥–Ω–æ—Ä–∞–∑–æ–≤—É—é" –Ω–∏–∂–µ
                String link = DB.get("request_link");

                // --- –æ–¥–Ω–æ—Ä–∞–∑–æ–≤–∞—è —Å—Å—ã–ª–∫–∞ (–∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–∞): —Ä–∞—Å–∫–æ–º–º–µ–Ω—Ç–∏—Ä—É–π, –µ—Å–ª–∏ –Ω—É–∂–Ω–æ –≤–º–µ—Å—Ç–æ –∑–∞—è–≤–∫–∏ ---
                // String channelId = DB.get("channel_id");
                // long expire = Instant.now().getEpochSecond() + 86400; // 24 —á–∞—Å–∞
                // var req = CreateChatInviteLink.builder()
                //         .chatId(channelId)
                //         .name("One-time access")
                //         .memberLimit(1)
                //         .expireDate((int) expire)
                //         .build();
                // link = execute(req).getInviteLink();
                // -------------------------------------------------------------------------------

                execute(SendMessage.builder()
                        .chatId(userId)
                        .text("–û–ø–ª–∞—Ç–∞ –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ ‚úÖ\n–°—Å—ã–ª–∫–∞ –¥–ª—è –≤—Ö–æ–¥–∞ –≤ –∫–∞–Ω–∞–ª: " + link + "\n–ï—Å–ª–∏ —Å—Å—ã–ª–∫–∞ –∏—Å—Ç–µ–∫–ª–∞ ‚Äî –Ω–∞–∂–º–∏—Ç–µ /my_sub.")
                        .build());
                return;
            }

            // 3) –¢–µ–∫—Å—Ç—ã, –∫–æ–º–∞–Ω–¥—ã, –∫–æ–ª–ª–±—ç–∫–∏
            if (update.hasMessage() && update.getMessage().hasText()) {
                var msg = update.getMessage();
                var text = msg.getText().trim();
                var user = msg.getFrom();

                // –ø–∏—à—É—â–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ‚Äî –≤ –ë–î
                DB.upsertUser(user.getId(), user.getUserName(), user.getFirstName(), user.getLastName());

                if (text.startsWith("/start")) {
                    sendStart(msg.getChatId());
                    return;
                }
                if (text.equals("/my_sub")) {
                    sendMySub(msg.getChatId(), user.getId());
                    return;
                }
                if (text.startsWith("/adminadd")) { // /adminadd 123456
                    AdminService.handleAdminAdd(this, msg);
                    return;
                }
                if (text.startsWith("/setgroup")) { // /setgroup -1001234567890
                    AdminService.handleSetGroup(this, msg);
                    return;
                }
                if (text.startsWith("/price")) { // /price 5000
                    AdminService.handlePrice(this, msg);
                    return;
                }
                if (text.startsWith("/stats")) {
                    AdminService.handleStats(this, msg);
                    return;
                }
            }

            // Inline –∫–Ω–æ–ø–∫–∏
            if (update.hasCallbackQuery()) {
                var cq = update.getCallbackQuery();
                var data = cq.getData();

                if (data.equals("pay")) {
                    // –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–Ω–≤–æ–π—Å
                    sendInvoice(cq.getMessage().getChatId().toString(), cq.getFrom().getId());
                } else if (data.equals("support")) {
                    execute(SendMessage.builder()
                            .chatId(cq.getMessage().getChatId())
                            .text("–ü–æ–¥–¥–µ—Ä–∂–∫–∞: @your_support_handle")
                            .build());
                }
                return;
            }

            // –∑–∞—è–≤–∫–∏ –≤ –∫–∞–Ω–∞–ª ‚Äî –∞–≤—Ç–æ–∞–ø—Ä—É–≤ –ø–æ –∞–∫—Ç–∏–≤–Ω–æ–π –ø–æ–¥–ø–∏—Å–∫–µ
            if (update.hasChatJoinRequest()) {
                ChatJoinRequest r = update.getChatJoinRequest();
                long userId = r.getUser().getId();
                boolean active = SubscriptionService.hasActiveSubscription(userId);
                if (active) {
                    var req = new ApproveChatJoinRequest(String.valueOf(r.getChat().getId()), userId);
                    execute(req);
                    execute(SendMessage.builder()
                            .chatId(userId)
                            .text("–í–∞—à –¥–æ—Å—Ç—É–ø –≤ –∫–∞–Ω–∞–ª –æ–¥–æ–±—Ä–µ–Ω. –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å üåô")
                            .build());
                } else {
                    var dec = new DeclineChatJoinRequest(String.valueOf(r.getChat().getId()), userId);
                    execute(dec);
                    execute(SendMessage.builder()
                            .chatId(userId)
                            .text("–£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π –ø–æ–¥–ø–∏—Å–∫–∏. –ù–∞–∂–º–∏—Ç–µ ¬´–û–ø–ª–∞—Ç–∏—Ç—å¬ª –∏ –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –≤—Ö–æ–¥.")
                            .build());
                }
            }

        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    private void sendStart(Long chatId) throws Exception {
        // —Ü–µ–Ω–∞ –∏–∑ –Ω–∞—Å—Ç—Ä–æ–µ–∫
        String price = DB.get("price_rub");
        if (price == null) price = "5000";

        String text = """
    ‚ú® –ü—Ä–µ–≤—Ä–∞—â–µ–Ω–∏–µ –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è –∑–¥–µ—Å—å.

    Metamorphia ‚Äî —ç—Ç–æ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–æ –≥–ª—É–±–æ–∫–∏—Ö —Ç—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∞—Ü–∏–π, –ø—Ä–∞–∫—Ç–∏–∫ –∏ –∑–Ω–∞–Ω–∏–π ìãπ.

    –ß—Ç–æ–±—ã —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –∫–∞—á–µ—Å—Ç–≤–æ –∫–æ–Ω—Ç–µ–Ω—Ç–∞‚Äª –∏ –∞—Ç–º–æ—Å—Ñ–µ—Ä—É —Å–æ–æ–±—â–µ—Å—Ç–≤–∞, –∫–∞–Ω–∞–ª —è–≤–ª—è–µ—Ç—Å—è –ø–ª–∞—Ç–Ω—ã–º.

    –°—Ç–æ–∏–º–æ—Å—Ç—å –¥–æ—Å—Ç—É–ø–∞: %s —Ä—É–±–ª–µ–π

    –î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–æ—Å—Ç—É–ø–∞ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É ¬´–û–ø–ª–∞—Ç–∏—Ç—å –¥–æ—Å—Ç—É–ø¬ª –Ω–∏–∂–µ.
    –ü–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–π –æ–ø–ª–∞—Ç—ã –±–æ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–∏—Ç –≤–∞–º —Å—Å—ã–ª–∫—É –¥–ª—è –≤—Ö–æ–¥–∞ –≤ –∫–∞–Ω–∞–ª.

    –ß—Ç–æ –≤—ã –ø–æ–ª—É—á–∞–µ—Ç–µ:
    ¬∑ –î–æ—Å—Ç—É–ø –Ω–∞ –º–µ—Å—è—Ü –≤ –∑–∞–∫—Ä—ã—Ç–æ–µ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–æ –ø—Ä–µ–æ–±—Ä–∞–∂–µ–Ω–∏—è

    –ï—Å–ª–∏ –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ –æ–ø–ª–∞—Ç—ã –≤–æ–∑–Ω–∏–∫–ª–∏ —Ç—Ä—É–¥–Ω–æ—Å—Ç–∏, –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É ¬´–°–≤—è–∑—å —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π¬ª

    –° –ª—é–±–æ–≤—å—é ‚òæ , ùìôùì≤ùìøùì™.
    """.formatted(price);

        InlineKeyboardMarkup kb = new InlineKeyboardMarkup(List.of(
                List.of(InlineKeyboardButton.builder().text("üèõÔ∏è –û–ø–ª–∞—Ç–∏—Ç—å " + price + " —Ä—É–±.").callbackData("pay").build()),
                List.of(InlineKeyboardButton.builder().text("üìû –°–≤—è–∑—å —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π").callbackData("support").build())
        ));
        execute(SendMessage.builder().chatId(chatId).text(text).replyMarkup(kb).build());
    }

    private void sendMySub(Long chatId, long userId) throws Exception {
        var sub = SubscriptionService.get(userId);
        if (sub == null || !"active".equals(sub.status) || sub.endTs <= Instant.now().getEpochSecond()) {
            InlineKeyboardMarkup kb = new InlineKeyboardMarkup(List.of(
                    List.of(InlineKeyboardButton.builder().text("üèõÔ∏è –û–ø–ª–∞—Ç–∏—Ç—å").callbackData("pay").build())
            ));
            execute(SendMessage.builder()
                    .chatId(chatId)
                    .text("–£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π –ø–æ–¥–ø–∏—Å–∫–∏. –ù–∞–∂–º–∏—Ç–µ ¬´–û–ø–ª–∞—Ç–∏—Ç—å¬ª, —á—Ç–æ–±—ã –æ—Ñ–æ—Ä–º–∏—Ç—å –¥–æ—Å—Ç—É–ø.")
                    .replyMarkup(kb)
                    .build());
            return;
        }
        String link = DB.get("request_link");
        String end = DateTimeFormatter.ofPattern("dd.MM.yyyy")
                .withZone(ZoneId.systemDefault()).format(Instant.ofEpochSecond(sub.endTs));
        execute(SendMessage.builder()
                .chatId(chatId)
                .text("–í–∞—à–∞ –ø–æ–¥–ø–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–Ω–∞ –¥–æ: " + end + "\n–°—Å—ã–ª–∫–∞ –¥–ª—è –≤—Ö–æ–¥–∞ –≤ –∫–∞–Ω–∞–ª: " + link + "\n–î–ª—è –ø—Ä–æ–¥–ª–µ–Ω–∏—è ‚Äî –Ω–∞–∂–º–∏—Ç–µ ¬´–û–ø–ª–∞—Ç–∏—Ç—å¬ª.")
                .replyMarkup(new InlineKeyboardMarkup(List.of(
                        List.of(InlineKeyboardButton.builder().text("–ü—Ä–æ–¥–ª–∏—Ç—å –Ω–∞ –º–µ—Å—è—Ü").callbackData("pay").build())
                )))
                .build());
    }

    /** –û—Ç–ø—Ä–∞–≤–∫–∞ –∏–Ω–≤–æ–π—Å–∞ —á–µ—Ä–µ–∑ Telegram Payments (–ÆKassa) */
    private void sendInvoice(String chatId, long userId) throws Exception {
        String provider = System.getenv("TG_PROVIDER_TOKEN");
        if (provider == null || provider.isBlank()) {
            execute(SendMessage.builder()
                    .chatId(chatId)
                    .text("–ü–ª–∞—Ç–µ–∂–∏ –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã: –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç TG_PROVIDER_TOKEN. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É.")
                    .build());
            return;
        }

        int amountRub = Integer.parseInt(java.util.Optional.ofNullable(DB.get("price_rub")).orElse("5000"));
        java.util.List<LabeledPrice> prices =
                java.util.List.of(new LabeledPrice("–î–æ—Å—Ç—É–ø –Ω–∞ –º–µ—Å—è—Ü", amountRub * 100)); // –∫–æ–ø–µ–π–∫–∏

        String payload = "meta-" + userId + "-" + System.currentTimeMillis();

        SendInvoice invoice = SendInvoice.builder()
                .chatId(chatId)
                .title("Metamorphia ‚Äî –¥–æ—Å—Ç—É–ø –Ω–∞ –º–µ—Å—è—Ü")
                .description("–ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ 30 –¥–Ω–µ–π –≤ –∑–∞–∫—Ä—ã—Ç—ã–π –∫–∞–Ω–∞–ª")
                .payload(payload)
                .providerToken(provider)
                .currency("RUB")
                .prices(prices)
                .startParameter("metamorphia") // <-- –û–ë–Ø–ó–ê–¢–ï–õ–¨–ù–û, –∏–Ω–∞—á–µ NPE
                // .providerData(providerDataJson) // –µ—Å–ª–∏ –ø–æ–Ω–∞–¥–æ–±–∏—Ç—Å—è —á–µ–∫ 54-–§–ó
                .build();

        execute(invoice);
    }
}